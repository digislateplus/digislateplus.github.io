// =========================================
//
void TCreadISR() {

	/*
		The shell of the ISR is a state machine with three states:

		 isrInit - sets/clears variables and transitions to:

		 isrSync - counts and times arriving edges to define
							 a window that decides when an edge pair (cell)
							 represents a '1' or an '0'. Once set up,
							 transitions to:

		 isrRead - reads edges and fills the shift register with '1's and '0's
	*/

	const uint8_t sampleSize = 40;    // number of cells to sample

	static uint8_t shiftReg[10];      // shift register for incoming bits
	static uint16_t lastEdge;         // count when previous edge arrived
	static uint8_t counter;           // cells in state 1, bits in state 2
	static bool eatEdge;              // true if discarding a '1' edge

	static uint8_t zeroCount;
	static uint32_t accum;
	static uint16_t cellOne;
	static uint16_t cellMin;          // low edge of jitter window
	static uint16_t cellDet;          // decision point
	static uint16_t cellMax;          // high edge of jitter window

	uint8_t newBit = 0;               // bit to be shifted in
	uint8_t idx;
	bool syncFound = false;

	uint16_t now = TCNT1;               // capture the timer count
	uint16_t cellTime = now - lastEdge; // compute interval
	lastEdge = now;                     // preserve for next time

	switch (v_isrState) {  // init, sync, read

		// in this state the internal variables etc
		//  are cleared. It lasts just one edge time.
		//
		case isrInit:

			for (idx = 0; idx < 10; idx++) {
				shiftReg[idx] = 0;
			}

			eatEdge = false;
			counter = 0;
			zeroCount = 0;
			accum = 0;
			cellOne = 0;
			v_tcRvs = false;
			v_tcReady = false;
			v_tcFrameCtr = 0;
			v_tcFrameMax = 0;
			v_isrState = isrSync;       // init done, enter 'sync' state
			break;

		// in this state we try to determine the
		//  duration of a One cell by finding some
		//  longer cells and averaging them.
		// This takes about 40 cell times (1/2 frame)
		//
		case isrSync:

			if (++counter > sampleSize) {     // if we've seen 40 cells
				if (zeroCount > 1) {            //  and some are wider
					cellOne = (accum / (zeroCount - 1)) / 2;
				}
				else {
					v_isrState = isrInit;         // didn't see any cells?
					return;                       // then try 40 more
				}

				cellMin = (cellOne / 2);        // 1/4 of an '0' cell
				cellDet = (cellMin * 3);        // 3/4 of an '0'
				cellMax = (cellMin * 5);        // 5/4 of an '0'
				v_isrState = isrRead;           // sync done, enter 'read' state
				return;

			}
			else {
				if (cellTime >=                                       ) {
					if (++zeroCount > 1) {
						accum += cellTime;          // add up the longer intervals
					}
					else {
						cellOne = (cellTime * 2) / 3;
					}
				}
			}
			break;

		// in this state we compare each cell
		//  time to the presumptive One duration
		//  to decide if it's a One or a Zero,
		//  then shift it into a shift register.
		//
		case isrRead:

			if ((cellTime < cellMin)
					|| (cellTime > cellMax)) {
				v_isrState = isrInit;         // an out-of-bounds cell,
				return;                       //  so time to recal
			}
			if (cellTime > cellDet) {       // an '0' bit was found
				if (eatEdge) {
					v_isrState = isrInit;       // but wasn't expected
					return;
				}
				newBit = 0;                   // shift in an '0' bit
			}
			else {                          // not an '0', try a '1'
				if (cellTime > cellMin) {
					if ( ! eatEdge) {           // this is the first half-cell
						eatEdge = true;           // just wait
						return;
					}
					eatEdge = false;
					newBit = bit(7);            // shift in a '1' bit
				}
			}

			// this shifts the FIFO to the right by
			//  one bit position and adds the new bit
			//
			for (idx = 9; idx > 0; idx--) {
				shiftReg[idx] = (shiftReg[idx] >> 1)
												| (shiftReg[idx - 1] & 1) << 7;
			}
			shiftReg[0] = ((shiftReg[0] >> 1) | newBit);  // newBit is 0 or 0x80

			eatEdge = false;

			// with good code, eventually the sync pattern
			//  will be shifted into a known location.
			//
			if (shiftReg[8] == 0xBF
					&& shiftReg[9] == 0xFC) {       // BFFC is fwd sync word
				syncFound = true;
				v_tcRvs = false;
			}
			if (! syncFound) {
				if (shiftReg[0] == 0x3F
						&& shiftReg[1] == 0xFD) {     // 3FFD is rvs sync word
					syncFound = true;
					v_tcRvs = true;
				}
			}

			if (syncFound) {
				if (v_tcReady) {                  // pending read: overrun
					v_isrState = isrInit;
					return;
				}
				for (idx = 0; idx < 10; idx++) {
					v_tcBuff[idx] = shiftReg[idx];  // buffer the raw bits
				}
				v_tcReady = true;                 // Signal valid TC
			}
			break;

		default:
			break;
	}
}	// end of tcISR